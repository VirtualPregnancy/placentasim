@Test
   subroutine test_define_node_geometry()
      use pfunit_mod
      use arrays,only: dp,node_xyz,num_nodes,nodes
      use geometry,only: define_node_geometry	
      use other_consts, only: MAX_FILENAME_LEN
      use test_data,only:write_node_file,delete_node_file,get_num_nodes, &
           get_dim_node_xyz,get_node_xyz,get_dim_nodes,get_nodes
      implicit none
      
      character(len=MAX_FILENAME_LEN) :: NODEFILE
      real(dp), allocatable :: test_node_xyz(:,:)
      integer, allocatable :: test_nodes(:)
      integer :: AllocateStatus,x,y,test_num_nodes

      NODEFILE = ""
      call write_node_file(NODEFILE)

      !call the subroutine with the test node file
      call define_node_geometry(NODEFILE)
      
      !populate test variables - variables populated by define_node_geometry
      call get_num_nodes(test_num_nodes)
      @assertEqual(test_num_nodes, num_nodes)
       
	  call get_dim_nodes(x)
      allocate (test_nodes(x), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_nodes array ***"
      call get_nodes(test_nodes)
      @assertEqual(test_nodes, nodes)
      deallocate(test_nodes)

      call get_dim_node_xyz(x,y)
      allocate (test_node_xyz(x,y), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_node_xyz array ***"
      call get_node_xyz(test_node_xyz)     
      @assertEqual(test_node_xyz,node_xyz)

      call delete_node_file(NODEFILE) 

   end subroutine test_define_node_geometry

