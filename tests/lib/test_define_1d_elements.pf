@Test
   subroutine test_define_1d_elements()
      use pfunit_mod
      use arrays,only: dp,num_elems,elem_nodes,elems_at_node,elem_cnct, &
           num_nodes,node_xyz,nodes,elem_field,elem_direction,elem_ordrs,maxgen
      use geometry,only: define_1d_elements	
      use indices, only: ne_length,num_ne,num_ord
      use other_consts, only: MAX_FILENAME_LEN
      use test_data,only: write_elem_file,delete_elem_file,get_num_nodes,get_dim_nodes, &
            get_nodes,get_dim_node_xyz,get_node_xyz,get_num_elems, get_dim_elem_nodes, &
            get_elem_nodes,get_dim_elems_at_node, get_elems_at_node,get_dim_elem_cnct, &
            get_elem_cnct,get_dim_elem_field,get_elem_field,get_dim_elem_direction, &
            get_elem_direction,get_dim_elem_ordrs,get_elem_ordrs
      implicit none

      character(len=MAX_FILENAME_LEN) :: ELEMFILE
      integer, allocatable :: test_elem_nodes(:,:)
      integer, allocatable :: test_elems_at_node(:,:)    
      integer, allocatable :: test_elem_cnct(:,:,:)        
      real(dp), allocatable :: test_elem_field(:,:)   
      real(dp),allocatable :: test_elem_direction(:,:)     
      integer, allocatable :: test_elem_ordrs(:,:)     
      integer :: test_num_elems,AllocateStatus,x,y

      !populate variables that sub define_1d_elements expects to be populated:
      call get_num_nodes(num_nodes)
      
      call get_dim_nodes(x)
      allocate (nodes(x), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for nodes array ***"	       
      call get_nodes(nodes)

      call get_dim_node_xyz(x,y)
      allocate (node_xyz(x,y), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for node_xyz array ***"
      call get_node_xyz(node_xyz)
      
      ELEMFILE = ""
      call write_elem_file(ELEMFILE)
      
      call define_1d_elements(ELEMFILE)
     
      !populate test variables - variables populated by sub define_1d_elements
      call get_num_elems(test_num_elems)
      @assertEqual(test_num_elems, num_elems)
      
      call  get_dim_elem_nodes(x)
      allocate (test_elem_nodes(2,x), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_elem_nodes array ***"      
      call get_elem_nodes(test_elem_nodes)
      @assertEqual(test_elem_nodes,elem_nodes)
      deallocate(test_elem_nodes)
      
      call get_dim_elems_at_node(x)
      allocate (test_elems_at_node(x,0:3), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_elems_at_node array ***"
      test_elems_at_node = 0      
      call get_elems_at_node(test_elems_at_node)   
      @assertEqual(test_elems_at_node,elems_at_node)
      deallocate(test_elems_at_node)   

      call get_dim_elem_cnct(x)
      allocate (test_elem_cnct(-1:1,0:2,0:x), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_elem_cnct array ***"      
      test_elem_cnct = 0
      call get_elem_cnct(test_elem_cnct)  
      @assertEqual(test_elem_cnct,elem_cnct)
      deallocate(test_elem_cnct)
            
      call get_dim_elem_field(x)
      allocate (test_elem_field(num_ne,x), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_elem_field array ***"      
      test_elem_field = 0.0_dp
      call get_elem_field(test_elem_field)  
      @assertEqual(test_elem_field,elem_field)
      deallocate(test_elem_field)

      call get_dim_elem_direction(x)
      allocate (test_elem_direction(3,x), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_elem_direction array ***"      
      call get_elem_direction(test_elem_direction) 
      @assertEqual(test_elem_direction,elem_direction)
      deallocate(test_elem_direction) 
            
      call get_dim_elem_ordrs(x)
      allocate (test_elem_ordrs(num_ord,x), STAT = AllocateStatus)
      if (AllocateStatus /= 0) STOP "*** Not enough memory for test_elem_ordrs array ***"      
      call get_elem_ordrs(test_elem_ordrs)  
      @assertEqual(test_elem_ordrs,elem_ordrs)
      deallocate(test_elem_ordrs)
      
      @assertEqual(5,maxgen) 
      !2

      call delete_elem_file(ELEMFILE)     

   end subroutine test_define_1d_elements

