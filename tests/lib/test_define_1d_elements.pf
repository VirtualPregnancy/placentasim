@Test
   subroutine test_define_1d_elements()
      use pfunit_mod
      use arrays,only: dp,num_elems,elem_nodes,elems_at_node,elem_cnct, &
           num_nodes,node_xyz,nodes,elem_field,elem_direction,elem_ordrs,maxgen
      use geometry,only: define_1d_elements	
      use indices, only: ne_length,num_ne,num_ord
      implicit none

      character(:),allocatable :: FILENAME
      integer :: test_elem_nodes(2,3) !array size: 2,num_elems
      integer :: test_elem_cnct(-1:1,0:2,0:3) !array size: -1:1,0:2,0:num_elems
      integer :: test_elems_at_node(4,0:3) !array size: num_nodes, 0:3
      real(dp) :: test_elem_field(num_ne,3) ! array size: num_ne, num_elems
      real(dp) :: test_elem_direction(3,3) !array size: 3,num_elems
      integer :: test_elem_ordrs(num_ord,3) !array size: num_ord, num_elems

      !variables calculated by subroutines called before define_1d_elements:
      if(allocated(nodes)) deallocate(nodes)
      allocate(nodes(4))

      if(allocated(node_xyz)) deallocate(node_xyz)
      allocate(node_xyz(3,4))

      num_nodes = 4 
    
      nodes(1)=1
      nodes(2)=2
      nodes(3)=3
      nodes(4)=4
    
      node_xyz(1,1) = 0.0_dp
      node_xyz(2,1) = 0.0_dp
      node_xyz(3,1) = 0.0_dp
      node_xyz(1,2) = 0.0_dp
      node_xyz(2,2) = 0.0_dp
      node_xyz(3,2) = -100.0_dp
      node_xyz(1,3) = 0.0_dp
      node_xyz(2,3) = -50.0_dp
      node_xyz(3,3) = -150.0_dp
      node_xyz(1,4) = 0.0_dp
      node_xyz(2,4) = 50.0_dp
      node_xyz(3,4) = -150.0_dp

      FILENAME = "test.ipelem"

      open(10, file=FILENAME, status="replace")
      write(10,*) 'CMISS Version 2.1  ipelem File Version 2'
      write(10,*) 'Heading:'
      write(10,*) ''
      write(10,*) 'The number of elements is [1]: 3'
      write(10,*) ''
      write(10,*) 'Element number [    1]:  1'
      write(10,*) 'The number of geometric Xj-coordinates is [3]: 3'
      write(10,*) 'The basis function type for geometric variable 1 is [1]:  1'
      write(10,*) 'The basis function type for geometric variable 2 is [1]:  1'
      write(10,*) 'The basis function type for geometric variable 3 is [1]:  1'
      write(10,*) 'Enter the 2 global numbers for basis 1:  1  2'
      write(10,*) ''
      write(10,*) 'Element number [ 1002]:  2'
      write(10,*) 'The number of geometric Xj-coordinates is [3]: 3'
      write(10,*) 'The basis function type for geometric variable 1 is [1]:  1'
      write(10,*) 'The basis function type for geometric variable 2 is [1]:  1'
      write(10,*) 'The basis function type for geometric variable 3 is [1]:  1'
      write(10,*) 'Enter the 2 global numbers for basis 1:  2  3'
      write(10,*) ''
      write(10,*) 'Element number [ 1003]:  3'
      write(10,*) 'The number of geometric Xj-coordinates is [3]: 3'
      write(10,*) 'The basis function type for geometric variable 1 is [1]:  1'
      write(10,*) 'The basis function type for geometric variable 2 is [1]:  1'
      write(10,*) 'The basis function type for geometric variable 3 is [1]:  1'
      write(10,*) 'Enter the 2 global numbers for basis 1:  2  4'
      close(10)

      test_elem_nodes(1,1)=1
      test_elem_nodes(2,1)=2
      test_elem_nodes(1,2)=2
      test_elem_nodes(2,2)=3
      test_elem_nodes(1,3)=2
      test_elem_nodes(2,3)=4

      test_elems_at_node(1,0)=1
      test_elems_at_node(1,1)=1
      test_elems_at_node(2,0)=3
      test_elems_at_node(2,1)=1
      test_elems_at_node(2,2)=2
      test_elems_at_node(2,3)=3
      test_elems_at_node(3,0)=1
      test_elems_at_node(3,1)=2
      test_elems_at_node(4,0)=1
      test_elems_at_node(4,1)=3  

      test_elem_cnct = 0
      test_elem_cnct(1,0,1)=2
      test_elem_cnct(1,1,1)=2
      test_elem_cnct(1,2,1)=3
      test_elem_cnct(-1,0,2)=1
      test_elem_cnct(-1,1,2)=1
      test_elem_cnct(-1,0,3)=1
      test_elem_cnct(-1,1,3)=1
      
      test_elem_field = 0.0_dp
      test_elem_field(ne_length,1) = 100.0_dp
      test_elem_field(ne_length,2) = 70.710678118654755_dp
      test_elem_field(ne_length,3) = 70.710678118654755_dp
      
      test_elem_direction(1,1) = 0.0_dp
      test_elem_direction(2,1) = 0.0_dp
      test_elem_direction(3,1) = -1.0_dp
      test_elem_direction(1,2) = 0.0_dp
      test_elem_direction(2,2 )= -0.70710678118654746_dp
      test_elem_direction(3,2) = -0.70710678118654746_dp
      test_elem_direction(1,3) = 0.0_dp
      test_elem_direction(2,3) = 0.70710678118654746_dp
      test_elem_direction(3,3) = -0.70710678118654746_dp
      
      test_elem_ordrs(1,1) = 1
      test_elem_ordrs(2,1) = 2
      test_elem_ordrs(3,1) = 2
      test_elem_ordrs(1,2) = 2
      test_elem_ordrs(2,2) = 1
      test_elem_ordrs(3,2) = 1
      test_elem_ordrs(1,3) = 2
      test_elem_ordrs(2,3) = 1
      test_elem_ordrs(3,3) = 1

      call define_1d_elements(FILENAME)
	
      @assertEqual(3, num_elems)
      @assertEqual(test_elem_nodes,elem_nodes)
      @assertEqual(test_elem_cnct,elem_cnct)
      @assertEqual(test_elems_at_node,elems_at_node)
      @assertEqual(test_elem_field,elem_field)
      @assertEqual(test_elem_direction,elem_direction)
      @assertEqual(test_elem_ordrs,elem_ordrs)
      @assertEqual(2,maxgen)

      open(10,file=FILENAME, status="old")
      close(10, status="delete")      

   end subroutine test_define_1d_elements

